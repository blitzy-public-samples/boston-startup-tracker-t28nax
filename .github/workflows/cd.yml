# GitHub Actions CD workflow for the Boston Startup Tracker
name: Boston Startup Tracker CD

# Trigger the workflow on push to the main branch
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push the backend Docker image
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./src/backend
          push: true
          tags: yourdockerhub/boston-startup-tracker-backend:latest

      # Step 5: Build and push the frontend Docker image
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./src/frontend
          push: true
          tags: yourdockerhub/boston-startup-tracker-frontend:latest

      # Step 6: Deploy to production server
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /path/to/production/directory
            docker-compose pull
            docker-compose up -d
            docker system prune -f

# Human tasks:
# - Set up secrets in GitHub repository settings (DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, PROD_HOST, PROD_USERNAME, PROD_SSH_KEY)
# - Implement staging deployment before production
# - Add smoke tests after deployment to ensure basic functionality
# - Implement database migration step before deploying new version
# - Set up monitoring and alerting for the deployment process
# - Implement rollback mechanism in case of deployment failure
# - Add Slack or email notifications for successful/failed deployments
# - Implement blue-green deployment strategy for zero-downtime updates
# - Set up automated backup before deployment
# - Implement canary releases for gradual rollout of new versions